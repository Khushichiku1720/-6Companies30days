Question link:- https://leetcode.com/problems/number-of-closed-islands/description/

class Solution {
public:
 void DFS(vector<vector<int>>& grid,vector<vector<int>>&vis,int i,int j,int r,int c)
 {
     vis[i][j]=1;
     grid[i][j]=1;
     if(i+1<r  && vis[i+1][j]==0 && grid[i+1][j]==0)
     DFS(grid,vis,i+1,j,r,c);
     if(i-1>=0 && vis[i-1][j]==0 && grid[i-1][j]==0)
     DFS(grid,vis,i-1,j,r,c);
     if(j-1>=0 && vis[i][j-1]==0 && grid[i][j-1]==0)
     DFS(grid,vis,i,j-1,r,c);
     if(j+1<c && vis[i][j+1]==0 && grid[i][j+1]==0)
     DFS(grid,vis,i,j+1,r,c);
 }
    int closedIsland(vector<vector<int>>& grid) {
        int r=grid.size(),c=grid[0].size(),count=0;
        vector<vector<int>>vis(r,vector<int>(c,0));
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(i-1<0 || j+1>=c || i+1>=r || j-1<0)
                {
                    if(vis[i][j]==0 && grid[i][j]==0)
                    {
                        DFS(grid,vis,i,j,r,c);
                    }
                }
            }
        }
       vector<vector<int>>vis1(r,vector<int>(c,0));
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                    if(vis1[i][j]==0 && grid[i][j]==0)
                    {
                        DFS(grid,vis1,i,j,r,c);
                        count++;
                    }
            }
        }
        return count;
    }
};
