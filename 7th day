Question link :- https://leetcode.com/problems/number-of-operations-to-make-network-connected/


class DisjointSet{
    public:
    vector<int>rank,parent;
    int extra;
    DisjointSet(int n)
    {
       rank.resize(n+1.0);
       parent.resize(n+1);
       for(int i=0;i<n;i++)
       {
           parent[i]=i;
       }
    }
    int findParent(int u)
    {
        if(parent[u]==u)
        return u;
        else
        return parent[u]=findParent(parent[u]);
    }
    void UnionByRank(int u,int v)
    {
        int ultP_u=findParent(u);
        int ultP_v=findParent(v);
       if(ultP_u==ultP_v)
       return;
       else
       if(rank[ultP_u]>rank[ultP_v])
       parent[ultP_v]=ultP_u;
       else
        if(rank[ultP_u]<rank[ultP_v])
       parent[ultP_u]=ultP_v;
       else
       parent[ultP_u]=ultP_v;
       rank[ultP_v]++;
    }
};
class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        DisjointSet ds(n);
        int extra=0,count=0;
        for(auto it:connections)
        {
            int u=it[0];
            int v=it[1];
           if(ds.findParent(u)==ds.findParent(v))
           extra++;
            else
            ds.UnionByRank(u,v);
        }
      for(int i=0;i<n;i++)
            {
                if(ds.findParent(i)==i)
                count++;
            }
           if(extra>=count-1)
           return count-1;
           else
           return -1; 
    }
};
